# network size
SIZE 200

# parameters of periodic execution
CYCLES 1000
CYCLE SIZE*10

# parameters of message transfer
# delay values here are relative to cycle length, in percentage,
# eg 50 means half the cycle length, 200 twice the cycle length, etc.
MINDELAY 0
MAXDELAY 0
# drop is a probability, 0<=DROP<=1
DROP 0

random.seed 1234567890
network.size SIZE
simulation.endtime CYCLE*CYCLES
simulation.logtime CYCLE

################### protocols ===========================

protocol.link peersim.core.IdleProtocol

protocol.avg self_stabilizing_load_balancing.SelfED

protocol.avg.linkable link
protocol.avg.step CYCLE
protocol.avg.transport tr

protocol.urt UniformRandomTransport
protocol.urt.mindelay (CYCLE*MINDELAY)/100
protocol.urt.maxdelay (CYCLE*MAXDELAY)/100

protocol.tr UnreliableTransport
protocol.tr.transport urt
protocol.tr.drop DROP

################### initialization ======================

init.ringlink WireRingLattice
init.ringlink.k 2  # The number of connections to each node (for example, k=2)
init.ringlink.protocol link


init.peak example.aggregation.PeakDistributionInitializer
init.peak.value 10000
init.peak.protocol avg

init.lin LinearDistribution
init.lin.protocol avg
init.lin.max 100
init.lin.min 1

#init.vals.max SIZE

init.sch CDScheduler
init.sch.protocol avg
init.sch.randstart

################ control ==============================

# print network
control.0 PrintLinkableControl
control.0.linkable link
control.0.after init.ringlink
control.0.step 1000000 # larger than CYCLE for only print once

# print MSE
control.1 self_stabilizing_load_balancing.MSEObserver
control.1.output_filename mse_ring.csv
control.1.protocol avg
control.1.step CYCLE
control.1.debug true

# SingleValueObserver
#control.2 SingleValueObserver
#control.2.protocol avg
#control.2.step CYCLE

